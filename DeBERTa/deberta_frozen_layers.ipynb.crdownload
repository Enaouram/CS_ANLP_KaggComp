{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a4d0ab34-f812-49e3-9520-220cdcba2ea0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.8/dist-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n",
      "Some weights of DebertaForSequenceClassification were not initialized from the model checkpoint at microsoft/deberta-base and are newly initialized: ['classifier.weight', 'pooler.dense.weight', 'pooler.dense.bias', 'classifier.bias']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n",
      "/home/zealous_easley/.local/lib/python3.8/site-packages/transformers/optimization.py:429: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n",
      "  warnings.warn(\n",
      "Epoch 1: 100%|██████████| 136/136 [00:13<00:00, 10.00it/s, loss=2.14]\n",
      "Epoch 2: 100%|██████████| 136/136 [00:13<00:00, 10.26it/s, loss=0.908]\n",
      "Epoch 3: 100%|██████████| 136/136 [00:12<00:00, 10.76it/s, loss=0.352]\n",
      "Epoch 4: 100%|██████████| 136/136 [00:12<00:00, 10.60it/s, loss=0.216]\n",
      "Epoch 5: 100%|██████████| 136/136 [00:10<00:00, 12.42it/s, loss=0.088] \n",
      "Epoch 6: 100%|██████████| 136/136 [00:10<00:00, 13.40it/s, loss=0.0751]\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "import pandas as pd\n",
    "import json\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from transformers import DebertaTokenizer, DebertaModel, DebertaConfig, DebertaForSequenceClassification, AdamW\n",
    "from tqdm import tqdm\n",
    "\n",
    "# Custom Dataset Class\n",
    "class TextDataset(Dataset):\n",
    "    def __init__(self, texts, labels, tokenizer, max_len):\n",
    "        self.texts = texts\n",
    "        self.labels = labels\n",
    "        self.tokenizer = tokenizer\n",
    "        self.max_len = max_len\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.texts)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        text = self.texts[idx]\n",
    "        label = self.labels[idx]\n",
    "        encoding = self.tokenizer.encode_plus(\n",
    "            text,\n",
    "            add_special_tokens=True,\n",
    "            max_length=self.max_len,\n",
    "            return_attention_mask=True,\n",
    "            padding='max_length',\n",
    "            truncation=True,\n",
    "            return_tensors='pt'\n",
    "        )\n",
    "        return {\n",
    "            'input_ids': encoding['input_ids'].flatten(),\n",
    "            'attention_mask': encoding['attention_mask'].flatten(),\n",
    "            'labels': torch.tensor(label, dtype=torch.long)\n",
    "        }\n",
    "\n",
    "# Load and preprocess data\n",
    "def load_data(filename):\n",
    "    with open(filename, 'r') as file:\n",
    "        data = json.load(file)\n",
    "    texts = [value for sublist in data.values() for value in sublist]\n",
    "    labels = [key for key, sublist in data.items() for _ in sublist]\n",
    "    return texts, labels\n",
    "\n",
    "tokenizer = DebertaTokenizer.from_pretrained('microsoft/deberta-base')\n",
    "texts, labels = load_data('augmented-train-mistral.json')\n",
    "label_encoder = LabelEncoder()\n",
    "labels = label_encoder.fit_transform(labels)\n",
    "train_texts, val_texts, train_labels, val_labels = train_test_split(texts, labels, test_size=0.1, random_state=42)\n",
    "\n",
    "# Create datasets\n",
    "train_dataset = TextDataset(train_texts, train_labels, tokenizer, max_len=128)\n",
    "val_dataset = TextDataset(val_texts, val_labels, tokenizer, max_len=128)\n",
    "\n",
    "# Load model and freeze layers\n",
    "model = DebertaForSequenceClassification.from_pretrained('microsoft/deberta-base', num_labels=len(set(labels)))\n",
    "for name, param in model.named_parameters():\n",
    "    if 'encoder.layer' in name:\n",
    "        layer_index = int(name.split('.')[3])\n",
    "        if layer_index < 8:\n",
    "            param.requires_grad = False\n",
    "\n",
    "# Setup the optimizer\n",
    "optimizer = AdamW(model.parameters(), lr=5e-6)\n",
    "\n",
    "# Train the model\n",
    "def train(model, data_loader, optimizer, device, epochs=6):\n",
    "    model.to(device)\n",
    "    model.train()\n",
    "    for epoch in range(epochs):\n",
    "        loop = tqdm(data_loader, leave=True)\n",
    "        for batch in loop:\n",
    "            input_ids = batch['input_ids'].to(device)\n",
    "            attention_mask = batch['attention_mask'].to(device)\n",
    "            labels = batch['labels'].to(device)\n",
    "\n",
    "            outputs = model(input_ids, attention_mask=attention_mask, labels=labels)\n",
    "            loss = outputs.loss\n",
    "\n",
    "            optimizer.zero_grad()\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "\n",
    "            loop.set_description(f'Epoch {epoch+1}')\n",
    "            loop.set_postfix(loss=loss.item())\n",
    "\n",
    "# Set device and prepare data loaders\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)\n",
    "\n",
    "# Execute training\n",
    "train(model, train_loader, optimizer, device)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fcba27ee-a95a-409d-92af-8ef0ff94471f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_test_data(filename):\n",
    "    with open(filename, 'r') as file:\n",
    "        texts = [line.strip() for line in file.readlines()]\n",
    "    return texts\n",
    "\n",
    "test_texts = load_test_data('test_shuffle.txt')\n",
    "test_dataset = TextDataset(test_texts, [0]*len(test_texts), tokenizer, max_len=128)  # Dummy labels for compatibility\n",
    "test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n",
    "def predict(model, data_loader, device):\n",
    "    model.eval()\n",
    "    predictions = []\n",
    "    with torch.no_grad():\n",
    "        for batch in data_loader:\n",
    "            input_ids = batch['input_ids'].to(device)\n",
    "            attention_mask = batch['attention_mask'].to(device)\n",
    "            outputs = model(input_ids, attention_mask=attention_mask)\n",
    "            preds = outputs.logits.argmax(dim=1)\n",
    "            predictions.extend(preds.cpu().numpy())\n",
    "    return predictions\n",
    "\n",
    "# Generate predictions\n",
    "test_predictions = predict(model, test_loader, device)\n",
    "# Assuming label_encoder was used to fit_transform labels\n",
    "predicted_labels = label_encoder.inverse_transform(test_predictions)\n",
    "import pandas as pd\n",
    "\n",
    "submission_df = pd.DataFrame({\n",
    "    'ID': range(len(predicted_labels)),\n",
    "    'Label': predicted_labels\n",
    "})\n",
    "\n",
    "# Save to CSV file for submission\n",
    "submission_df.to_csv('submission_deberta_fl8_aug.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "993ce5bf-acd7-4965-ace1-d815704eacda",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
